// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "OpenColorTypes.h"
#include "OpenColorAppHelpers.h"
#include "OpenColorIO.h"
#include "OpenColorTransforms.h"

using namespace System;
using namespace System::Runtime::InteropServices;

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::BoolToString(bool val)
{
    auto ___ret = ::OpenColorIO_v2_4::BoolToString(val);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

bool OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::BoolFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::BoolFromString(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::LoggingLevelToString(OpenColorIO::OpenColorIO_v2_4::LoggingLevel level)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::LoggingLevel)level;
    auto ___ret = ::OpenColorIO_v2_4::LoggingLevelToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::LoggingLevel OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::LoggingLevelFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::LoggingLevelFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::LoggingLevel)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::TransformDirectionToString(OpenColorIO::OpenColorIO_v2_4::TransformDirection dir)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::TransformDirection)dir;
    auto ___ret = ::OpenColorIO_v2_4::TransformDirectionToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

/// <summary>Will throw if string is not recognized.</summary>
OpenColorIO::OpenColorIO_v2_4::TransformDirection OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::TransformDirectionFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::TransformDirectionFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::TransformDirection)___ret;
}

OpenColorIO::OpenColorIO_v2_4::TransformDirection OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::GetInverseTransformDirection(OpenColorIO::OpenColorIO_v2_4::TransformDirection dir)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::TransformDirection)dir;
    auto ___ret = ::OpenColorIO_v2_4::GetInverseTransformDirection(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::TransformDirection)___ret;
}

OpenColorIO::OpenColorIO_v2_4::TransformDirection OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::CombineTransformDirections(OpenColorIO::OpenColorIO_v2_4::TransformDirection d1, OpenColorIO::OpenColorIO_v2_4::TransformDirection d2)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::TransformDirection)d1;
    auto __arg1 = (enum ::OpenColorIO_v2_4::TransformDirection)d2;
    auto ___ret = ::OpenColorIO_v2_4::CombineTransformDirections(__arg0, __arg1);
    return (OpenColorIO::OpenColorIO_v2_4::TransformDirection)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::BitDepthToString(OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    auto ___ret = ::OpenColorIO_v2_4::BitDepthToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::BitDepthFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::BitDepthFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::BitDepthIsFloat(OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    auto ___ret = ::OpenColorIO_v2_4::BitDepthIsFloat(__arg0);
    return ___ret;
}

int OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::BitDepthToInt(OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    auto ___ret = ::OpenColorIO_v2_4::BitDepthToInt(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::AllocationToString(OpenColorIO::OpenColorIO_v2_4::Allocation allocation)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::Allocation)allocation;
    auto ___ret = ::OpenColorIO_v2_4::AllocationToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::Allocation OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::AllocationFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::AllocationFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::Allocation)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::InterpolationToString(OpenColorIO::OpenColorIO_v2_4::Interpolation interp)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::Interpolation)interp;
    auto ___ret = ::OpenColorIO_v2_4::InterpolationToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::Interpolation OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::InterpolationFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::InterpolationFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::Interpolation)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::GpuLanguageToString(OpenColorIO::OpenColorIO_v2_4::GpuLanguage language)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::GpuLanguage)language;
    auto ___ret = ::OpenColorIO_v2_4::GpuLanguageToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::GpuLanguage OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::GpuLanguageFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::GpuLanguageFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::GpuLanguage)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::EnvironmentModeToString(OpenColorIO::OpenColorIO_v2_4::EnvironmentMode mode)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::EnvironmentMode)mode;
    auto ___ret = ::OpenColorIO_v2_4::EnvironmentModeToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::EnvironmentMode OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::EnvironmentModeFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::EnvironmentModeFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::EnvironmentMode)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::CDLStyleToString(OpenColorIO::OpenColorIO_v2_4::CDLStyle style)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::CDLStyle)style;
    auto ___ret = ::OpenColorIO_v2_4::CDLStyleToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::CDLStyle OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::CDLStyleFromString(::System::String^ style)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(style);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::CDLStyleFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::CDLStyle)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::RangeStyleToString(OpenColorIO::OpenColorIO_v2_4::RangeStyle style)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::RangeStyle)style;
    auto ___ret = ::OpenColorIO_v2_4::RangeStyleToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::RangeStyle OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::RangeStyleFromString(::System::String^ style)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(style);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::RangeStyleFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::RangeStyle)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::FixedFunctionStyleToString(OpenColorIO::OpenColorIO_v2_4::FixedFunctionStyle style)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::FixedFunctionStyle)style;
    auto ___ret = ::OpenColorIO_v2_4::FixedFunctionStyleToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::FixedFunctionStyle OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::FixedFunctionStyleFromString(::System::String^ style)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(style);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::FixedFunctionStyleFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::FixedFunctionStyle)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::GradingStyleToString(OpenColorIO::OpenColorIO_v2_4::GradingStyle style)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::GradingStyle)style;
    auto ___ret = ::OpenColorIO_v2_4::GradingStyleToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::GradingStyle OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::GradingStyleFromString(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::GradingStyleFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::GradingStyle)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::ExposureContrastStyleToString(OpenColorIO::OpenColorIO_v2_4::ExposureContrastStyle style)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::ExposureContrastStyle)style;
    auto ___ret = ::OpenColorIO_v2_4::ExposureContrastStyleToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::ExposureContrastStyle OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::ExposureContrastStyleFromString(::System::String^ style)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(style);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::ExposureContrastStyleFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::ExposureContrastStyle)___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::NegativeStyleToString(OpenColorIO::OpenColorIO_v2_4::NegativeStyle style)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::NegativeStyle)style;
    auto ___ret = ::OpenColorIO_v2_4::NegativeStyleToString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::NegativeStyle OpenColorIO::OpenColorIO_v2_4::OpenColorTypes::NegativeStyleFromString(::System::String^ style)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(style);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::NegativeStyleFromString(__arg0);
    return (OpenColorIO::OpenColorIO_v2_4::NegativeStyle)___ret;
}

