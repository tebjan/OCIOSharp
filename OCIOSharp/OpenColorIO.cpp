// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "OpenColorIO.h"
#include "OpenColorTransforms.h"
#include "OpenColorTypes.h"

using namespace System;
using namespace System::Runtime::InteropServices;

OpenColorIO::OpenColorIO_v2_4::Exception::Exception(class ::OpenColorIO_v2_4::Exception* native)
    : ::Std::RuntimeError((::std::runtime_error*)native)
{
}

OpenColorIO::OpenColorIO_v2_4::Exception^ OpenColorIO::OpenColorIO_v2_4::Exception::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Exception((class ::OpenColorIO_v2_4::Exception*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::Exception::Exception(class ::OpenColorIO_v2_4::Exception* native, bool ownNativeInstance)
    : ::Std::RuntimeError((::std::runtime_error*)native, ownNativeInstance)
{
}

OpenColorIO::OpenColorIO_v2_4::Exception^ OpenColorIO::OpenColorIO_v2_4::Exception::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Exception((class ::OpenColorIO_v2_4::Exception*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::Exception::~Exception()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::OpenColorIO_v2_4::Exception*) __nativePtr;
    }
}

OpenColorIO::OpenColorIO_v2_4::Exception::Exception()
    : ::Std::RuntimeError((::std::runtime_error*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::OpenColorIO_v2_4::Exception();
}

OpenColorIO::OpenColorIO_v2_4::Exception::Exception(::System::String^ _0)
    : ::Std::RuntimeError((::std::runtime_error*)nullptr)
{
    __ownsNativeInstance = true;
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(_0);
    auto __arg0 = ___arg0.c_str();
    NativePtr = new class ::OpenColorIO_v2_4::Exception(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::ExceptionMissingFile(class ::OpenColorIO_v2_4::ExceptionMissingFile* native)
    : OpenColorIO::OpenColorIO_v2_4::Exception((::OpenColorIO_v2_4::Exception*)native)
{
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile^ OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile((class ::OpenColorIO_v2_4::ExceptionMissingFile*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::ExceptionMissingFile(class ::OpenColorIO_v2_4::ExceptionMissingFile* native, bool ownNativeInstance)
    : OpenColorIO::OpenColorIO_v2_4::Exception((::OpenColorIO_v2_4::Exception*)native, ownNativeInstance)
{
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile^ OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile((class ::OpenColorIO_v2_4::ExceptionMissingFile*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::~ExceptionMissingFile()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::OpenColorIO_v2_4::ExceptionMissingFile*) __nativePtr;
    }
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::ExceptionMissingFile()
    : OpenColorIO::OpenColorIO_v2_4::Exception((::OpenColorIO_v2_4::Exception*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::OpenColorIO_v2_4::ExceptionMissingFile();
}

OpenColorIO::OpenColorIO_v2_4::ExceptionMissingFile::ExceptionMissingFile(::System::String^ _0)
    : OpenColorIO::OpenColorIO_v2_4::Exception((::OpenColorIO_v2_4::Exception*)nullptr)
{
    __ownsNativeInstance = true;
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(_0);
    auto __arg0 = ___arg0.c_str();
    NativePtr = new class ::OpenColorIO_v2_4::ExceptionMissingFile(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::Config::Config(class ::OpenColorIO_v2_4::Config* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Config^ OpenColorIO::OpenColorIO_v2_4::Config::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Config((class ::OpenColorIO_v2_4::Config*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::Config::Config(class ::OpenColorIO_v2_4::Config* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Config^ OpenColorIO::OpenColorIO_v2_4::Config::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Config((class ::OpenColorIO_v2_4::Config*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::Config::~Config()
{
    delete NativePtr;
}

void OpenColorIO::OpenColorIO_v2_4::Config::SetVersion(unsigned int major, unsigned int minor)
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setVersion(major, minor);
}

void OpenColorIO::OpenColorIO_v2_4::Config::UpgradeToLatestVersion()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->upgradeToLatestVersion();
}

void OpenColorIO::OpenColorIO_v2_4::Config::Validate()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->validate();
}

void OpenColorIO::OpenColorIO_v2_4::Config::Serialize(::System::IO::TextWriter^ os)
{
    msclr::interop::marshal_context ctx_os;
    auto __arg0 = ctx_os.marshal_as<std::ostream*>(os);
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->serialize(*__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddEnvironmentVar(::System::String^ name, ::System::String^ defaultValue)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(defaultValue);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addEnvironmentVar(__arg0, __arg1);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetEnvironmentVarNameByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getEnvironmentVarNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetEnvironmentVarDefault(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getEnvironmentVarDefault(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearEnvironmentVars()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearEnvironmentVars();
}

void OpenColorIO::OpenColorIO_v2_4::Config::LoadEnvironment()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->loadEnvironment();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetSearchPath(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getSearchPath(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearSearchPaths()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearSearchPaths();
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddSearchPath(::System::String^ path)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(path);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addSearchPath(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumColorSpaces(OpenColorIO::OpenColorIO_v2_4::SearchReferenceSpaceType searchReferenceType, OpenColorIO::OpenColorIO_v2_4::ColorSpaceVisibility visibility)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::SearchReferenceSpaceType)searchReferenceType;
    auto __arg1 = (enum ::OpenColorIO_v2_4::ColorSpaceVisibility)visibility;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumColorSpaces(__arg0, __arg1);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetColorSpaceNameByIndex(OpenColorIO::OpenColorIO_v2_4::SearchReferenceSpaceType searchReferenceType, OpenColorIO::OpenColorIO_v2_4::ColorSpaceVisibility visibility, int index)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::SearchReferenceSpaceType)searchReferenceType;
    auto __arg1 = (enum ::OpenColorIO_v2_4::ColorSpaceVisibility)visibility;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getColorSpaceNameByIndex(__arg0, __arg1, index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumColorSpaces()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumColorSpaces();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetColorSpaceNameByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getColorSpaceNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetIndexForColorSpace(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getIndexForColorSpace(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetCanonicalName(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getCanonicalName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::RemoveColorSpace(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->removeColorSpace(__arg0);
}

bool OpenColorIO::OpenColorIO_v2_4::Config::IsColorSpaceUsed(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->isColorSpaceUsed(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearColorSpaces()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearColorSpaces();
}

bool OpenColorIO::OpenColorIO_v2_4::Config::IsInactiveColorSpace(::System::String^ colorspace)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(colorspace);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->isInactiveColorSpace(__arg0);
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::Config::IsColorSpaceLinear(::System::String^ colorSpace, OpenColorIO::OpenColorIO_v2_4::ReferenceSpaceType referenceSpaceType)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(colorSpace);
    auto __arg0 = ___arg0.c_str();
    auto __arg1 = (enum ::OpenColorIO_v2_4::ReferenceSpaceType)referenceSpaceType;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->isColorSpaceLinear(__arg0, __arg1);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::SetRole(::System::String^ role, ::System::String^ colorSpaceName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(role);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(colorSpaceName);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setRole(__arg0, __arg1);
}

bool OpenColorIO::OpenColorIO_v2_4::Config::HasRole(::System::String^ role)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(role);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->hasRole(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetRoleName(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getRoleName(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetRoleColorSpace(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getRoleColorSpace(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetRoleColorSpace(::System::String^ roleName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(roleName);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getRoleColorSpace(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddSharedView(::System::String^ view, ::System::String^ viewTransformName, ::System::String^ colorSpaceName, ::System::String^ looks, ::System::String^ ruleName, ::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(viewTransformName);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(colorSpaceName);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(looks);
    auto __arg3 = ___arg3.c_str();
    auto ___arg4 = clix::marshalString<clix::E_UTF8>(ruleName);
    auto __arg4 = ___arg4.c_str();
    auto ___arg5 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg5 = ___arg5.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addSharedView(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
}

void OpenColorIO::OpenColorIO_v2_4::Config::RemoveSharedView(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->removeSharedView(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplay(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplay(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDefaultView(::System::String^ display)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDefaultView(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDefaultView(::System::String^ display, ::System::String^ colorspaceName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(colorspaceName);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDefaultView(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumViews(::System::String^ display)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumViews(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetView(::System::String^ display, int index)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getView(__arg0, index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumViews(::System::String^ display, ::System::String^ colorspaceName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(colorspaceName);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumViews(__arg0, __arg1);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetView(::System::String^ display, ::System::String^ colorspaceName, int index)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(colorspaceName);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getView(__arg0, __arg1, index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayViewTransformName(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayViewTransformName(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayViewColorSpaceName(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayViewColorSpaceName(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayViewLooks(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayViewLooks(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayViewRule(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayViewRule(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayViewDescription(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayViewDescription(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddDisplayView(::System::String^ display, ::System::String^ view, ::System::String^ colorSpaceName, ::System::String^ looks)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(colorSpaceName);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(looks);
    auto __arg3 = ___arg3.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addDisplayView(__arg0, __arg1, __arg2, __arg3);
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddDisplayView(::System::String^ display, ::System::String^ view, ::System::String^ viewTransformName, ::System::String^ colorSpaceName, ::System::String^ looks, ::System::String^ ruleName, ::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(viewTransformName);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(colorSpaceName);
    auto __arg3 = ___arg3.c_str();
    auto ___arg4 = clix::marshalString<clix::E_UTF8>(looks);
    auto __arg4 = ___arg4.c_str();
    auto ___arg5 = clix::marshalString<clix::E_UTF8>(ruleName);
    auto __arg5 = ___arg5.c_str();
    auto ___arg6 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg6 = ___arg6.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addDisplayView(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddDisplaySharedView(::System::String^ display, ::System::String^ sharedView)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(sharedView);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addDisplaySharedView(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::Config::RemoveDisplayView(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->removeDisplayView(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearDisplays()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearDisplays();
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddVirtualDisplayView(::System::String^ view, ::System::String^ viewTransformName, ::System::String^ colorSpaceName, ::System::String^ looks, ::System::String^ ruleName, ::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(viewTransformName);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(colorSpaceName);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(looks);
    auto __arg3 = ___arg3.c_str();
    auto ___arg4 = clix::marshalString<clix::E_UTF8>(ruleName);
    auto __arg4 = ___arg4.c_str();
    auto ___arg5 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg5 = ___arg5.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addVirtualDisplayView(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
}

void OpenColorIO::OpenColorIO_v2_4::Config::AddVirtualDisplaySharedView(::System::String^ sharedView)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(sharedView);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->addVirtualDisplaySharedView(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayNumViews(OpenColorIO::OpenColorIO_v2_4::ViewType type)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::ViewType)type;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayNumViews(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayView(OpenColorIO::OpenColorIO_v2_4::ViewType type, int index)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::ViewType)type;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayView(__arg0, index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayViewTransformName(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayViewTransformName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayViewColorSpaceName(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayViewColorSpaceName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayViewLooks(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayViewLooks(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayViewRule(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayViewRule(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetVirtualDisplayViewDescription(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getVirtualDisplayViewDescription(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::RemoveVirtualDisplayView(::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->removeVirtualDisplayView(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearVirtualDisplay()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearVirtualDisplay();
}

int OpenColorIO::OpenColorIO_v2_4::Config::InstantiateDisplayFromMonitorName(::System::String^ monitorName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(monitorName);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->instantiateDisplayFromMonitorName(__arg0);
    return ___ret;
}

int OpenColorIO::OpenColorIO_v2_4::Config::InstantiateDisplayFromICCProfile(::System::String^ ICCProfileFilepath)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(ICCProfileFilepath);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->instantiateDisplayFromICCProfile(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayAll(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayAll(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetDisplayAllByName(::System::String^ _0)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(_0);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDisplayAllByName(__arg0);
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::Config::IsDisplayTemporary(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->isDisplayTemporary(index);
    return ___ret;
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumViews(OpenColorIO::OpenColorIO_v2_4::ViewType type, ::System::String^ display)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::ViewType)type;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumViews(__arg0, __arg1);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetView(OpenColorIO::OpenColorIO_v2_4::ViewType type, ::System::String^ display, int index)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::ViewType)type;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg1 = ___arg1.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getView(__arg0, __arg1, index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::GetDefaultLumaCoefs([::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] double% rgb)
{
    double __arg0 = rgb;
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDefaultLumaCoefs(&__arg0);
    rgb = __arg0;
}

void OpenColorIO::OpenColorIO_v2_4::Config::SetDefaultLumaCoefs([::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] double% rgb)
{
    double __arg0 = rgb;
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setDefaultLumaCoefs(&__arg0);
    rgb = __arg0;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetLookNameByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getLookNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearLooks()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearLooks();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetViewTransformNameByIndex(int i)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getViewTransformNameByIndex(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearViewTransforms()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearViewTransforms();
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumNamedTransforms(OpenColorIO::OpenColorIO_v2_4::NamedTransformVisibility visibility)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::NamedTransformVisibility)visibility;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumNamedTransforms(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetNamedTransformNameByIndex(OpenColorIO::OpenColorIO_v2_4::NamedTransformVisibility visibility, int index)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::NamedTransformVisibility)visibility;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNamedTransformNameByIndex(__arg0, index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetNumNamedTransforms()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumNamedTransforms();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetNamedTransformNameByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNamedTransformNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::GetIndexForNamedTransform(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getIndexForNamedTransform(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearNamedTransforms()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearNamedTransforms();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetColorSpaceFromFilepath(::System::String^ filePath)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filePath);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getColorSpaceFromFilepath(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::GetColorSpaceFromFilepath(::System::String^ filePath, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] unsigned long long% ruleIndex)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filePath);
    auto __arg0 = ___arg0.c_str();
    size_t __arg1 = (::size_t)ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getColorSpaceFromFilepath(__arg0, __arg1);
    ruleIndex = __arg1;
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

bool OpenColorIO::OpenColorIO_v2_4::Config::FilepathOnlyMatchesDefaultRule(::System::String^ filePath)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filePath);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->filepathOnlyMatchesDefaultRule(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::ParseColorSpaceFromString(::System::String^ str)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(str);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->parseColorSpaceFromString(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ClearProcessorCache()
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->clearProcessorCache();
}

void OpenColorIO::OpenColorIO_v2_4::Config::Archive(::System::IO::TextWriter^ ostream)
{
    msclr::interop::marshal_context ctx_ostream;
    auto __arg0 = ctx_ostream.marshal_as<std::ostream*>(ostream);
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->archive(*__arg0);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::Config::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::Config::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::Config*)object.ToPointer();
}

unsigned int OpenColorIO::OpenColorIO_v2_4::Config::MajorVersion::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getMajorVersion();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::MajorVersion::set(unsigned int major)
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setMajorVersion(major);
}

unsigned int OpenColorIO::OpenColorIO_v2_4::Config::MinorVersion::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getMinorVersion();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::MinorVersion::set(unsigned int minor)
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setMinorVersion(minor);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::Name::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::Name::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setName(__arg0);
}

char OpenColorIO::OpenColorIO_v2_4::Config::FamilySeparator::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getFamilySeparator();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::FamilySeparator::set(char separator)
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setFamilySeparator(separator);
}

char OpenColorIO::OpenColorIO_v2_4::Config::DefaultFamilySeparator::get()
{
    auto ___ret = ::OpenColorIO_v2_4::Config::GetDefaultFamilySeparator();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::Description::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDescription();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::Description::set(::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setDescription(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::CacheID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getCacheID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumEnvironmentVars::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumEnvironmentVars();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::EnvironmentMode OpenColorIO::OpenColorIO_v2_4::Config::EnvironmentMode::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getEnvironmentMode();
    return (OpenColorIO::OpenColorIO_v2_4::EnvironmentMode)___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::EnvironmentMode::set(OpenColorIO::OpenColorIO_v2_4::EnvironmentMode mode)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::EnvironmentMode)mode;
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setEnvironmentMode(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::SearchPath::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getSearchPath();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::SearchPath::set(::System::String^ path)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(path);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setSearchPath(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumSearchPaths::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumSearchPaths();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::WorkingDir::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getWorkingDir();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::WorkingDir::set(::System::String^ dirname)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(dirname);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setWorkingDir(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::InactiveColorSpaces::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getInactiveColorSpaces();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::InactiveColorSpaces::set(::System::String^ inactiveColorSpaces)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(inactiveColorSpaces);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setInactiveColorSpaces(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumRoles::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumRoles();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::DefaultDisplay::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDefaultDisplay();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumDisplays::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumDisplays();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::ActiveDisplays::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getActiveDisplays();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ActiveDisplays::set(::System::String^ displays)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(displays);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setActiveDisplays(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::ActiveViews::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getActiveViews();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::ActiveViews::set(::System::String^ views)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(views);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setActiveViews(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumDisplaysAll::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumDisplaysAll();
    return ___ret;
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumLooks::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumLooks();
    return ___ret;
}

int OpenColorIO::OpenColorIO_v2_4::Config::NumViewTransforms::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getNumViewTransforms();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Config::DefaultViewTransformName::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getDefaultViewTransformName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Config::DefaultViewTransformName::set(::System::String^ defaultName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(defaultName);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setDefaultViewTransformName(__arg0);
}

bool OpenColorIO::OpenColorIO_v2_4::Config::StrictParsingEnabled::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->isStrictParsingEnabled();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::StrictParsingEnabled::set(bool enabled)
{
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setStrictParsingEnabled(enabled);
}

OpenColorIO::OpenColorIO_v2_4::ProcessorCacheFlags OpenColorIO::OpenColorIO_v2_4::Config::ProcessorCacheFlags::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->getProcessorCacheFlags();
    return (OpenColorIO::OpenColorIO_v2_4::ProcessorCacheFlags)___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Config::ProcessorCacheFlags::set(OpenColorIO::OpenColorIO_v2_4::ProcessorCacheFlags flags)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::ProcessorCacheFlags)flags;
    ((class ::OpenColorIO_v2_4::Config*)NativePtr)->setProcessorCacheFlags(__arg0);
}

bool OpenColorIO::OpenColorIO_v2_4::Config::IsArchivable::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Config*)NativePtr)->isArchivable();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::FileRules::FileRules(class ::OpenColorIO_v2_4::FileRules* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::FileRules^ OpenColorIO::OpenColorIO_v2_4::FileRules::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::FileRules((class ::OpenColorIO_v2_4::FileRules*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::FileRules::FileRules(class ::OpenColorIO_v2_4::FileRules* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::FileRules^ OpenColorIO::OpenColorIO_v2_4::FileRules::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::FileRules((class ::OpenColorIO_v2_4::FileRules*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::FileRules::~FileRules()
{
    delete NativePtr;
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::FileRules::GetIndexForRule(::System::String^ ruleName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(ruleName);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getIndexForRule(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetName(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetPattern(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getPattern(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::SetPattern(unsigned long long ruleIndex, ::System::String^ pattern)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(pattern);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->setPattern(__arg0, __arg1);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetExtension(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getExtension(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::SetExtension(unsigned long long ruleIndex, ::System::String^ extension)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(extension);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->setExtension(__arg0, __arg1);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetRegex(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getRegex(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::SetRegex(unsigned long long ruleIndex, ::System::String^ regex)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(regex);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->setRegex(__arg0, __arg1);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetColorSpace(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getColorSpace(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::SetColorSpace(unsigned long long ruleIndex, ::System::String^ colorSpace)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(colorSpace);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->setColorSpace(__arg0, __arg1);
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::FileRules::GetNumCustomKeys(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getNumCustomKeys(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetCustomKeyName(unsigned long long ruleIndex, unsigned long long key)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = key;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getCustomKeyName(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::GetCustomKeyValue(unsigned long long ruleIndex, unsigned long long key)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = key;
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getCustomKeyValue(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::SetCustomKey(unsigned long long ruleIndex, ::System::String^ key, ::System::String^ value)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(key);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(value);
    auto __arg2 = ___arg2.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->setCustomKey(__arg0, __arg1, __arg2);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::InsertRule(unsigned long long ruleIndex, ::System::String^ name, ::System::String^ colorSpace, ::System::String^ pattern, ::System::String^ extension)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(colorSpace);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(pattern);
    auto __arg3 = ___arg3.c_str();
    auto ___arg4 = clix::marshalString<clix::E_UTF8>(extension);
    auto __arg4 = ___arg4.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->insertRule(__arg0, __arg1, __arg2, __arg3, __arg4);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::InsertRule(unsigned long long ruleIndex, ::System::String^ name, ::System::String^ colorSpace, ::System::String^ regex)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(colorSpace);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(regex);
    auto __arg3 = ___arg3.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->insertRule(__arg0, __arg1, __arg2, __arg3);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::InsertPathSearchRule(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->insertPathSearchRule(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::SetDefaultRuleColorSpace(::System::String^ colorSpace)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(colorSpace);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->setDefaultRuleColorSpace(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::RemoveRule(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->removeRule(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::IncreaseRulePriority(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->increaseRulePriority(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::DecreaseRulePriority(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->decreaseRulePriority(__arg0);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::FileRules::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::FileRules*)object.ToPointer();
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::FileRules::NumEntries::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->getNumEntries();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::FileRules::IsDefault::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::FileRules*)NativePtr)->isDefault();
    return ___ret;
}

/// <summary>Reserved rule name for the default rule.</summary>
::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::DefaultRuleName::get()
{
    return (::OpenColorIO_v2_4::FileRules::DefaultRuleName == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(::OpenColorIO_v2_4::FileRules::DefaultRuleName));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::DefaultRuleName::set(::System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ::OpenColorIO_v2_4::FileRules::DefaultRuleName = _value.c_str();
}

/// <summary>Reserved rule name for the file path search rule</summary>
/// <remarks>FileRules::insertPathSearchRule.</remarks>
::System::String^ OpenColorIO::OpenColorIO_v2_4::FileRules::FilePathSearchRuleName::get()
{
    return (::OpenColorIO_v2_4::FileRules::FilePathSearchRuleName == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(::OpenColorIO_v2_4::FileRules::FilePathSearchRuleName));
}

void OpenColorIO::OpenColorIO_v2_4::FileRules::FilePathSearchRuleName::set(::System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ::OpenColorIO_v2_4::FileRules::FilePathSearchRuleName = _value.c_str();
}

OpenColorIO::OpenColorIO_v2_4::ViewingRules::ViewingRules(class ::OpenColorIO_v2_4::ViewingRules* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ViewingRules^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ViewingRules((class ::OpenColorIO_v2_4::ViewingRules*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ViewingRules::ViewingRules(class ::OpenColorIO_v2_4::ViewingRules* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ViewingRules^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ViewingRules((class ::OpenColorIO_v2_4::ViewingRules*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ViewingRules::~ViewingRules()
{
    delete NativePtr;
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetIndexForRule(::System::String^ ruleName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(ruleName);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getIndexForRule(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetName(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetNumColorSpaces(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getNumColorSpaces(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetColorSpace(unsigned long long ruleIndex, unsigned long long colorSpaceIndex)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = colorSpaceIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getColorSpace(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::AddColorSpace(unsigned long long ruleIndex, ::System::String^ colorSpace)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(colorSpace);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->addColorSpace(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::RemoveColorSpace(unsigned long long ruleIndex, unsigned long long colorSpaceIndex)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = colorSpaceIndex;
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->removeColorSpace(__arg0, __arg1);
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetNumEncodings(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getNumEncodings(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetEncoding(unsigned long long ruleIndex, unsigned long long encodingIndex)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = encodingIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getEncoding(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::AddEncoding(unsigned long long ruleIndex, ::System::String^ encoding)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(encoding);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->addEncoding(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::RemoveEncoding(unsigned long long ruleIndex, unsigned long long encodingIndex)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = encodingIndex;
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->removeEncoding(__arg0, __arg1);
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetNumCustomKeys(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getNumCustomKeys(__arg0);
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetCustomKeyName(unsigned long long ruleIndex, unsigned long long keyIndex)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = keyIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getCustomKeyName(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewingRules::GetCustomKeyValue(unsigned long long ruleIndex, unsigned long long keyIndex)
{
    auto __arg0 = ruleIndex;
    auto __arg1 = keyIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getCustomKeyValue(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::SetCustomKey(unsigned long long ruleIndex, ::System::String^ key, ::System::String^ value)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(key);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(value);
    auto __arg2 = ___arg2.c_str();
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->setCustomKey(__arg0, __arg1, __arg2);
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::InsertRule(unsigned long long ruleIndex, ::System::String^ ruleName)
{
    auto __arg0 = ruleIndex;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(ruleName);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->insertRule(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::RemoveRule(unsigned long long ruleIndex)
{
    auto __arg0 = ruleIndex;
    ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->removeRule(__arg0);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ViewingRules::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ViewingRules::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ViewingRules*)object.ToPointer();
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::ViewingRules::NumEntries::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewingRules*)NativePtr)->getNumEntries();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::ColorSpace::ColorSpace(class ::OpenColorIO_v2_4::ColorSpace* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ColorSpace^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ColorSpace((class ::OpenColorIO_v2_4::ColorSpace*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ColorSpace::ColorSpace(class ::OpenColorIO_v2_4::ColorSpace* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ColorSpace^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ColorSpace((class ::OpenColorIO_v2_4::ColorSpace*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ColorSpace::~ColorSpace()
{
    delete NativePtr;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::GetAlias(unsigned long long idx)
{
    auto __arg0 = idx;
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getAlias(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpace::HasAlias(::System::String^ alias)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(alias);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->hasAlias(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::AddAlias(::System::String^ alias)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(alias);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->addAlias(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::RemoveAlias(::System::String^ alias)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(alias);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->removeAlias(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::ClearAliases()
{
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->clearAliases();
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpace::HasCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->hasCategory(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::AddCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->addCategory(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::RemoveCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->removeCategory(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::GetCategory(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getCategory(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::ClearCategories()
{
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->clearCategories();
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::GetAllocationVars([::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] float% vars)
{
    float __arg0 = vars;
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getAllocationVars(&__arg0);
    vars = __arg0;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::SetAllocationVars(int numvars, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] float% vars)
{
    float __arg1 = vars;
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setAllocationVars(numvars, &__arg1);
    vars = __arg1;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ColorSpace::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ColorSpace*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::Name::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::Name::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setName(__arg0);
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::ColorSpace::NumAliases::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getNumAliases();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::Family::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getFamily();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::Family::set(::System::String^ family)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(family);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setFamily(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::EqualityGroup::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getEqualityGroup();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::EqualityGroup::set(::System::String^ equalityGroup)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(equalityGroup);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setEqualityGroup(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::Description::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getDescription();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::Description::set(::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setDescription(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::ColorSpace::BitDepth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getBitDepth();
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::BitDepth::set(OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setBitDepth(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::ReferenceSpaceType OpenColorIO::OpenColorIO_v2_4::ColorSpace::ReferenceSpaceType::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getReferenceSpaceType();
    return (OpenColorIO::OpenColorIO_v2_4::ReferenceSpaceType)___ret;
}

int OpenColorIO::OpenColorIO_v2_4::ColorSpace::NumCategories::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getNumCategories();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpace::Encoding::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getEncoding();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::Encoding::set(::System::String^ encoding)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(encoding);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setEncoding(__arg0);
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpace::IsData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->isData();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::IsData::set(bool isData)
{
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setIsData(isData);
}

OpenColorIO::OpenColorIO_v2_4::Allocation OpenColorIO::OpenColorIO_v2_4::ColorSpace::Allocation::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getAllocation();
    return (OpenColorIO::OpenColorIO_v2_4::Allocation)___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpace::Allocation::set(OpenColorIO::OpenColorIO_v2_4::Allocation allocation)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::Allocation)allocation;
    ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->setAllocation(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::ColorSpace::AllocationNumVars::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpace*)NativePtr)->getAllocationNumVars();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::ColorSpaceSet(class ::OpenColorIO_v2_4::ColorSpaceSet* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^ OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet((class ::OpenColorIO_v2_4::ColorSpaceSet*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::ColorSpaceSet(class ::OpenColorIO_v2_4::ColorSpaceSet* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^ OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet((class ::OpenColorIO_v2_4::ColorSpaceSet*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::~ColorSpaceSet()
{
    delete NativePtr;
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::operator==(OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^ __op, OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^ css)
{
    bool __opNull = ReferenceEquals(__op, nullptr);
    bool cssNull = ReferenceEquals(css, nullptr);
    if (__opNull || cssNull)
        return __opNull && cssNull;
    auto &__arg0 = *(class ::OpenColorIO_v2_4::ColorSpaceSet*)__op->NativePtr;
    auto &__arg1 = *(class ::OpenColorIO_v2_4::ColorSpaceSet*)css->NativePtr;
    auto ___ret = __arg0 == __arg1;
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::Equals(::System::Object^ obj)
{
    return this == safe_cast<OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^>(obj);
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::operator!=(OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^ __op, OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet^ css)
{
    bool __opNull = ReferenceEquals(__op, nullptr);
    bool cssNull = ReferenceEquals(css, nullptr);
    if (__opNull || cssNull)
        return !(__opNull && cssNull);
    auto &__arg0 = *(class ::OpenColorIO_v2_4::ColorSpaceSet*)__op->NativePtr;
    auto &__arg1 = *(class ::OpenColorIO_v2_4::ColorSpaceSet*)css->NativePtr;
    auto ___ret = __arg0 != __arg1;
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::GetColorSpaceNameByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpaceSet*)NativePtr)->getColorSpaceNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::GetColorSpaceIndex(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpaceSet*)NativePtr)->getColorSpaceIndex(__arg0);
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::HasColorSpace(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpaceSet*)NativePtr)->hasColorSpace(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::RemoveColorSpace(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ColorSpaceSet*)NativePtr)->removeColorSpace(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::ClearColorSpaces()
{
    ((class ::OpenColorIO_v2_4::ColorSpaceSet*)NativePtr)->clearColorSpaces();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ColorSpaceSet*)object.ToPointer();
}

int OpenColorIO::OpenColorIO_v2_4::ColorSpaceSet::NumColorSpaces::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ColorSpaceSet*)NativePtr)->getNumColorSpaces();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::Look::Look(class ::OpenColorIO_v2_4::Look* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Look^ OpenColorIO::OpenColorIO_v2_4::Look::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Look((class ::OpenColorIO_v2_4::Look*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::Look::Look(class ::OpenColorIO_v2_4::Look* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Look^ OpenColorIO::OpenColorIO_v2_4::Look::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Look((class ::OpenColorIO_v2_4::Look*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::Look::~Look()
{
    delete NativePtr;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::Look::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::Look::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::Look*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Look::Name::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Look*)NativePtr)->getName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Look::Name::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Look*)NativePtr)->setName(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Look::ProcessSpace::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Look*)NativePtr)->getProcessSpace();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Look::ProcessSpace::set(::System::String^ processSpace)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(processSpace);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Look*)NativePtr)->setProcessSpace(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Look::Description::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Look*)NativePtr)->getDescription();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Look::Description::set(::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Look*)NativePtr)->setDescription(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::NamedTransform::NamedTransform(class ::OpenColorIO_v2_4::NamedTransform* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::NamedTransform^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::NamedTransform((class ::OpenColorIO_v2_4::NamedTransform*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::NamedTransform::NamedTransform(class ::OpenColorIO_v2_4::NamedTransform* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::NamedTransform^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::NamedTransform((class ::OpenColorIO_v2_4::NamedTransform*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::NamedTransform::~NamedTransform()
{
    delete NativePtr;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::GetAlias(unsigned long long idx)
{
    auto __arg0 = idx;
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getAlias(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

bool OpenColorIO::OpenColorIO_v2_4::NamedTransform::HasAlias(::System::String^ alias)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(alias);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->hasAlias(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::AddAlias(::System::String^ alias)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(alias);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->addAlias(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::RemoveAlias(::System::String^ alias)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(alias);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->removeAlias(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::ClearAliases()
{
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->clearAliases();
}

bool OpenColorIO::OpenColorIO_v2_4::NamedTransform::HasCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->hasCategory(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::AddCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->addCategory(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::RemoveCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->removeCategory(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::GetCategory(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getCategory(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::ClearCategories()
{
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->clearCategories();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::NamedTransform::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::NamedTransform*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::Name::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::Name::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->setName(__arg0);
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::NamedTransform::NumAliases::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getNumAliases();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::Family::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getFamily();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::Family::set(::System::String^ family)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(family);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->setFamily(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::Description::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getDescription();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::Description::set(::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->setDescription(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::NamedTransform::NumCategories::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getNumCategories();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::NamedTransform::Encoding::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->getEncoding();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::NamedTransform::Encoding::set(::System::String^ encoding)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(encoding);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::NamedTransform*)NativePtr)->setEncoding(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::ViewTransform::ViewTransform(class ::OpenColorIO_v2_4::ViewTransform* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ViewTransform^ OpenColorIO::OpenColorIO_v2_4::ViewTransform::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ViewTransform((class ::OpenColorIO_v2_4::ViewTransform*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ViewTransform::ViewTransform(class ::OpenColorIO_v2_4::ViewTransform* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ViewTransform^ OpenColorIO::OpenColorIO_v2_4::ViewTransform::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ViewTransform((class ::OpenColorIO_v2_4::ViewTransform*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ViewTransform::~ViewTransform()
{
    delete NativePtr;
}

bool OpenColorIO::OpenColorIO_v2_4::ViewTransform::HasCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->hasCategory(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::AddCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->addCategory(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::RemoveCategory(::System::String^ category)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(category);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->removeCategory(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewTransform::GetCategory(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->getCategory(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::ClearCategories()
{
    ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->clearCategories();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ViewTransform::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ViewTransform*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewTransform::Name::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->getName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::Name::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->setName(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewTransform::Family::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->getFamily();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::Family::set(::System::String^ family)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(family);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->setFamily(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ViewTransform::Description::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->getDescription();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ViewTransform::Description::set(::System::String^ description)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(description);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->setDescription(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::ViewTransform::NumCategories::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->getNumCategories();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::ReferenceSpaceType OpenColorIO::OpenColorIO_v2_4::ViewTransform::ReferenceSpaceType::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ViewTransform*)NativePtr)->getReferenceSpaceType();
    return (OpenColorIO::OpenColorIO_v2_4::ReferenceSpaceType)___ret;
}

OpenColorIO::OpenColorIO_v2_4::Processor::Processor(class ::OpenColorIO_v2_4::Processor* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Processor^ OpenColorIO::OpenColorIO_v2_4::Processor::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Processor((class ::OpenColorIO_v2_4::Processor*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::Processor::Processor(class ::OpenColorIO_v2_4::Processor* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Processor^ OpenColorIO::OpenColorIO_v2_4::Processor::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Processor((class ::OpenColorIO_v2_4::Processor*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::Processor::~Processor()
{
    delete NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::FormatMetadata^ OpenColorIO::OpenColorIO_v2_4::Processor::GetTransformFormatMetadata(int index)
{
    auto &___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->getTransformFormatMetadata(index);
    return (OpenColorIO::OpenColorIO_v2_4::FormatMetadata^)((&___ret == nullptr) ? nullptr : gcnew ::OpenColorIO::OpenColorIO_v2_4::FormatMetadata((class ::OpenColorIO_v2_4::FormatMetadata*)&___ret));
}

bool OpenColorIO::OpenColorIO_v2_4::Processor::HasDynamicProperty(OpenColorIO::OpenColorIO_v2_4::DynamicPropertyType type)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::DynamicPropertyType)type;
    auto ___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->hasDynamicProperty(__arg0);
    return ___ret;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::Processor::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::Processor::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::Processor*)object.ToPointer();
}

bool OpenColorIO::OpenColorIO_v2_4::Processor::IsNoOp::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->isNoOp();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::Processor::HasChannelCrosstalk::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->hasChannelCrosstalk();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Processor::CacheID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->getCacheID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::FormatMetadata^ OpenColorIO::OpenColorIO_v2_4::Processor::FormatMetadata::get()
{
    auto &___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->getFormatMetadata();
    return (OpenColorIO::OpenColorIO_v2_4::FormatMetadata^)((&___ret == nullptr) ? nullptr : gcnew ::OpenColorIO::OpenColorIO_v2_4::FormatMetadata((class ::OpenColorIO_v2_4::FormatMetadata*)&___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Processor::NumTransforms::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->getNumTransforms();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::Processor::IsDynamic::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Processor*)NativePtr)->isDynamic();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::CPUProcessor::CPUProcessor(class ::OpenColorIO_v2_4::CPUProcessor* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::CPUProcessor^ OpenColorIO::OpenColorIO_v2_4::CPUProcessor::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::CPUProcessor((class ::OpenColorIO_v2_4::CPUProcessor*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::CPUProcessor::CPUProcessor(class ::OpenColorIO_v2_4::CPUProcessor* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::CPUProcessor^ OpenColorIO::OpenColorIO_v2_4::CPUProcessor::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::CPUProcessor((class ::OpenColorIO_v2_4::CPUProcessor*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::CPUProcessor::~CPUProcessor()
{
    delete NativePtr;
}

bool OpenColorIO::OpenColorIO_v2_4::CPUProcessor::HasDynamicProperty(OpenColorIO::OpenColorIO_v2_4::DynamicPropertyType type)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::DynamicPropertyType)type;
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->hasDynamicProperty(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::CPUProcessor::Apply(OpenColorIO::OpenColorIO_v2_4::ImageDesc^ imgDesc)
{
    if (ReferenceEquals(imgDesc, nullptr))
        throw gcnew ::System::ArgumentNullException("imgDesc", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::OpenColorIO_v2_4::ImageDesc*)imgDesc->NativePtr;
    ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->apply(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::CPUProcessor::Apply(OpenColorIO::OpenColorIO_v2_4::ImageDesc^ srcImgDesc, OpenColorIO::OpenColorIO_v2_4::ImageDesc^ dstImgDesc)
{
    if (ReferenceEquals(srcImgDesc, nullptr))
        throw gcnew ::System::ArgumentNullException("srcImgDesc", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::OpenColorIO_v2_4::ImageDesc*)srcImgDesc->NativePtr;
    if (ReferenceEquals(dstImgDesc, nullptr))
        throw gcnew ::System::ArgumentNullException("dstImgDesc", "Cannot be null because it is a C++ reference (&).");
    auto &__arg1 = *(class ::OpenColorIO_v2_4::ImageDesc*)dstImgDesc->NativePtr;
    ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->apply(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::CPUProcessor::ApplyRGB([::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] float% pixel)
{
    float __arg0 = pixel;
    ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->applyRGB(&__arg0);
    pixel = __arg0;
}

void OpenColorIO::OpenColorIO_v2_4::CPUProcessor::ApplyRGBA([::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] float% pixel)
{
    float __arg0 = pixel;
    ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->applyRGBA(&__arg0);
    pixel = __arg0;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::CPUProcessor::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::CPUProcessor::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::CPUProcessor*)object.ToPointer();
}

bool OpenColorIO::OpenColorIO_v2_4::CPUProcessor::IsNoOp::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->isNoOp();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::CPUProcessor::IsIdentity::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->isIdentity();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::CPUProcessor::HasChannelCrosstalk::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->hasChannelCrosstalk();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::CPUProcessor::CacheID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->getCacheID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::CPUProcessor::InputBitDepth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->getInputBitDepth();
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::CPUProcessor::OutputBitDepth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->getOutputBitDepth();
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::CPUProcessor::IsDynamic::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::CPUProcessor*)NativePtr)->isDynamic();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::GPUProcessor::GPUProcessor(class ::OpenColorIO_v2_4::GPUProcessor* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GPUProcessor^ OpenColorIO::OpenColorIO_v2_4::GPUProcessor::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GPUProcessor((class ::OpenColorIO_v2_4::GPUProcessor*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::GPUProcessor::GPUProcessor(class ::OpenColorIO_v2_4::GPUProcessor* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GPUProcessor^ OpenColorIO::OpenColorIO_v2_4::GPUProcessor::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GPUProcessor((class ::OpenColorIO_v2_4::GPUProcessor*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::GPUProcessor::~GPUProcessor()
{
    delete NativePtr;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::GPUProcessor::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::GPUProcessor::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::GPUProcessor*)object.ToPointer();
}

bool OpenColorIO::OpenColorIO_v2_4::GPUProcessor::IsNoOp::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GPUProcessor*)NativePtr)->isNoOp();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::GPUProcessor::HasChannelCrosstalk::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GPUProcessor*)NativePtr)->hasChannelCrosstalk();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GPUProcessor::CacheID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GPUProcessor*)NativePtr)->getCacheID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::ProcessorMetadata(class ::OpenColorIO_v2_4::ProcessorMetadata* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata^ OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata((class ::OpenColorIO_v2_4::ProcessorMetadata*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::ProcessorMetadata(class ::OpenColorIO_v2_4::ProcessorMetadata* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata^ OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata((class ::OpenColorIO_v2_4::ProcessorMetadata*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::~ProcessorMetadata()
{
    delete NativePtr;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::GetFile(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ProcessorMetadata*)NativePtr)->getFile(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::GetLook(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ProcessorMetadata*)NativePtr)->getLook(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::AddFile(::System::String^ fname)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(fname);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ProcessorMetadata*)NativePtr)->addFile(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::AddLook(::System::String^ look)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(look);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::ProcessorMetadata*)NativePtr)->addLook(__arg0);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ProcessorMetadata*)object.ToPointer();
}

int OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::NumFiles::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ProcessorMetadata*)NativePtr)->getNumFiles();
    return ___ret;
}

int OpenColorIO::OpenColorIO_v2_4::ProcessorMetadata::NumLooks::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ProcessorMetadata*)NativePtr)->getNumLooks();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::Baker::Baker(class ::OpenColorIO_v2_4::Baker* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Baker^ OpenColorIO::OpenColorIO_v2_4::Baker::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Baker((class ::OpenColorIO_v2_4::Baker*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::Baker::Baker(class ::OpenColorIO_v2_4::Baker* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Baker^ OpenColorIO::OpenColorIO_v2_4::Baker::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Baker((class ::OpenColorIO_v2_4::Baker*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::Baker::~Baker()
{
    delete NativePtr;
}

void OpenColorIO::OpenColorIO_v2_4::Baker::SetDisplayView(::System::String^ display, ::System::String^ view)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(display);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(view);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setDisplayView(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::Baker::Bake(::System::IO::TextWriter^ os)
{
    msclr::interop::marshal_context ctx_os;
    auto __arg0 = ctx_os.marshal_as<std::ostream*>(os);
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->bake(*__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::GetFormatNameByIndex(int index)
{
    auto ___ret = ::OpenColorIO_v2_4::Baker::getFormatNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::GetFormatExtensionByIndex(int index)
{
    auto ___ret = ::OpenColorIO_v2_4::Baker::getFormatExtensionByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::Baker::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::Baker::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::Baker*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::Format::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getFormat();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Baker::Format::set(::System::String^ formatName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(formatName);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setFormat(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::FormatMetadata^ OpenColorIO::OpenColorIO_v2_4::Baker::FormatMetadata::get()
{
    auto &___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getFormatMetadata();
    return (OpenColorIO::OpenColorIO_v2_4::FormatMetadata^)((&___ret == nullptr) ? nullptr : gcnew ::OpenColorIO::OpenColorIO_v2_4::FormatMetadata((class ::OpenColorIO_v2_4::FormatMetadata*)&___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::InputSpace::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getInputSpace();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Baker::InputSpace::set(::System::String^ inputSpace)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(inputSpace);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setInputSpace(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::ShaperSpace::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getShaperSpace();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Baker::ShaperSpace::set(::System::String^ shaperSpace)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaperSpace);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setShaperSpace(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::Looks::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getLooks();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Baker::Looks::set(::System::String^ looks)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(looks);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setLooks(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::TargetSpace::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getTargetSpace();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Baker::TargetSpace::set(::System::String^ targetSpace)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(targetSpace);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setTargetSpace(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::Display::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getDisplay();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Baker::View::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getView();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

int OpenColorIO::OpenColorIO_v2_4::Baker::ShaperSize::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getShaperSize();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Baker::ShaperSize::set(int shapersize)
{
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setShaperSize(shapersize);
}

int OpenColorIO::OpenColorIO_v2_4::Baker::CubeSize::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->getCubeSize();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Baker::CubeSize::set(int cubesize)
{
    ((class ::OpenColorIO_v2_4::Baker*)NativePtr)->setCubeSize(cubesize);
}

int OpenColorIO::OpenColorIO_v2_4::Baker::NumFormats::get()
{
    auto ___ret = ::OpenColorIO_v2_4::Baker::getNumFormats();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::ImageDesc::ImageDesc(class ::OpenColorIO_v2_4::ImageDesc* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ImageDesc^ OpenColorIO::OpenColorIO_v2_4::ImageDesc::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ImageDesc((class ::OpenColorIO_v2_4::ImageDesc*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ImageDesc::ImageDesc(class ::OpenColorIO_v2_4::ImageDesc* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ImageDesc^ OpenColorIO::OpenColorIO_v2_4::ImageDesc::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ImageDesc((class ::OpenColorIO_v2_4::ImageDesc*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ImageDesc::~ImageDesc()
{
    delete NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::ImageDesc::ImageDesc()
{
    __ownsNativeInstance = true;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ImageDesc::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ImageDesc::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ImageDesc*)object.ToPointer();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ImageDesc::RData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getRData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ImageDesc::GData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getGData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ImageDesc::BData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getBData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ImageDesc::AData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getAData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::ImageDesc::BitDepth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getBitDepth();
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

long OpenColorIO::OpenColorIO_v2_4::ImageDesc::Width::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getWidth();
    return ___ret;
}

long OpenColorIO::OpenColorIO_v2_4::ImageDesc::Height::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getHeight();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::ImageDesc::XStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getXStrideBytes();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::ImageDesc::YStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->getYStrideBytes();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::ImageDesc::IsRGBAPacked::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->isRGBAPacked();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::ImageDesc::IsFloat::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ImageDesc*)NativePtr)->isFloat();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::PackedImageDesc(class ::OpenColorIO_v2_4::PackedImageDesc* native)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)native)
{
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc^ OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::PackedImageDesc((class ::OpenColorIO_v2_4::PackedImageDesc*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::PackedImageDesc(class ::OpenColorIO_v2_4::PackedImageDesc* native, bool ownNativeInstance)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)native, ownNativeInstance)
{
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc^ OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::PackedImageDesc((class ::OpenColorIO_v2_4::PackedImageDesc*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::~PackedImageDesc()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::OpenColorIO_v2_4::PackedImageDesc*) __nativePtr;
    }
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::PackedImageDesc(::System::IntPtr data, long width, long height, long numChannels)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (void*)data;
    NativePtr = new class ::OpenColorIO_v2_4::PackedImageDesc(__arg0, width, height, numChannels);
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::PackedImageDesc(::System::IntPtr data, long width, long height, long numChannels, OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth, long long chanStrideBytes, long long xStrideBytes, long long yStrideBytes)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (void*)data;
    auto __arg4 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    auto __arg5 = chanStrideBytes;
    auto __arg6 = xStrideBytes;
    auto __arg7 = yStrideBytes;
    NativePtr = new class ::OpenColorIO_v2_4::PackedImageDesc(__arg0, width, height, numChannels, __arg4, __arg5, __arg6, __arg7);
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::PackedImageDesc(::System::IntPtr data, long width, long height, OpenColorIO::OpenColorIO_v2_4::ChannelOrdering chanOrder)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (void*)data;
    auto __arg3 = (enum ::OpenColorIO_v2_4::ChannelOrdering)chanOrder;
    NativePtr = new class ::OpenColorIO_v2_4::PackedImageDesc(__arg0, width, height, __arg3);
}

OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::PackedImageDesc(::System::IntPtr data, long width, long height, OpenColorIO::OpenColorIO_v2_4::ChannelOrdering chanOrder, OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth, long long chanStrideBytes, long long xStrideBytes, long long yStrideBytes)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (void*)data;
    auto __arg3 = (enum ::OpenColorIO_v2_4::ChannelOrdering)chanOrder;
    auto __arg4 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    auto __arg5 = chanStrideBytes;
    auto __arg6 = xStrideBytes;
    auto __arg7 = yStrideBytes;
    NativePtr = new class ::OpenColorIO_v2_4::PackedImageDesc(__arg0, width, height, __arg3, __arg4, __arg5, __arg6, __arg7);
}

OpenColorIO::OpenColorIO_v2_4::ChannelOrdering OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::ChannelOrder::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getChannelOrder();
    return (OpenColorIO::OpenColorIO_v2_4::ChannelOrdering)___ret;
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::BitDepth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getBitDepth();
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::Data::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::RData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getRData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::GData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getGData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::BData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getBData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::AData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getAData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

long OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::Width::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getWidth();
    return ___ret;
}

long OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::Height::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getHeight();
    return ___ret;
}

long OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::NumChannels::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getNumChannels();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::ChanStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getChanStrideBytes();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::XStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getXStrideBytes();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::YStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->getYStrideBytes();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::IsRGBAPacked::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->isRGBAPacked();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::PackedImageDesc::IsFloat::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PackedImageDesc*)NativePtr)->isFloat();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::PlanarImageDesc(class ::OpenColorIO_v2_4::PlanarImageDesc* native)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)native)
{
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc^ OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc((class ::OpenColorIO_v2_4::PlanarImageDesc*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::PlanarImageDesc(class ::OpenColorIO_v2_4::PlanarImageDesc* native, bool ownNativeInstance)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)native, ownNativeInstance)
{
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc^ OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc((class ::OpenColorIO_v2_4::PlanarImageDesc*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::~PlanarImageDesc()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::OpenColorIO_v2_4::PlanarImageDesc*) __nativePtr;
    }
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::PlanarImageDesc(::System::IntPtr rData, ::System::IntPtr gData, ::System::IntPtr bData, ::System::IntPtr aData, long width, long height)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (void*)rData;
    auto __arg1 = (void*)gData;
    auto __arg2 = (void*)bData;
    auto __arg3 = (void*)aData;
    NativePtr = new class ::OpenColorIO_v2_4::PlanarImageDesc(__arg0, __arg1, __arg2, __arg3, width, height);
}

OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::PlanarImageDesc(::System::IntPtr rData, ::System::IntPtr gData, ::System::IntPtr bData, ::System::IntPtr aData, long width, long height, OpenColorIO::OpenColorIO_v2_4::BitDepth bitDepth, long long xStrideBytes, long long yStrideBytes)
    : OpenColorIO::OpenColorIO_v2_4::ImageDesc((::OpenColorIO_v2_4::ImageDesc*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (void*)rData;
    auto __arg1 = (void*)gData;
    auto __arg2 = (void*)bData;
    auto __arg3 = (void*)aData;
    auto __arg6 = (enum ::OpenColorIO_v2_4::BitDepth)bitDepth;
    auto __arg7 = xStrideBytes;
    auto __arg8 = yStrideBytes;
    NativePtr = new class ::OpenColorIO_v2_4::PlanarImageDesc(__arg0, __arg1, __arg2, __arg3, width, height, __arg6, __arg7, __arg8);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::RData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getRData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::GData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getGData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::BData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getBData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::AData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getAData();
    if (___ret == nullptr) return ::System::IntPtr();
    return ::System::IntPtr(___ret);
}

OpenColorIO::OpenColorIO_v2_4::BitDepth OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::BitDepth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getBitDepth();
    return (OpenColorIO::OpenColorIO_v2_4::BitDepth)___ret;
}

long OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::Width::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getWidth();
    return ___ret;
}

long OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::Height::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getHeight();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::XStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getXStrideBytes();
    return ___ret;
}

long long OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::YStrideBytes::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->getYStrideBytes();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::IsRGBAPacked::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->isRGBAPacked();
    return ___ret;
}

bool OpenColorIO::OpenColorIO_v2_4::PlanarImageDesc::IsFloat::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::PlanarImageDesc*)NativePtr)->isFloat();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::GpuShaderCreator(class ::OpenColorIO_v2_4::GpuShaderCreator* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator((class ::OpenColorIO_v2_4::GpuShaderCreator*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::GpuShaderCreator(class ::OpenColorIO_v2_4::GpuShaderCreator* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator((class ::OpenColorIO_v2_4::GpuShaderCreator*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::~GpuShaderCreator()
{
    delete NativePtr;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::Begin(::System::String^ uid)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(uid);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->begin(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::End()
{
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->end();
}

bool OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::HasDynamicProperty(OpenColorIO::OpenColorIO_v2_4::DynamicPropertyType type)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::DynamicPropertyType)type;
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->hasDynamicProperty(__arg0);
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AddTexture(::System::String^ textureName, ::System::String^ samplerName, unsigned int width, unsigned int height, OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureType channel, OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureDimensions dimensions, OpenColorIO::OpenColorIO_v2_4::Interpolation interpolation, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] float% values)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(textureName);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(samplerName);
    auto __arg1 = ___arg1.c_str();
    auto __arg4 = (enum ::OpenColorIO_v2_4::GpuShaderCreator::TextureType)channel;
    auto __arg5 = (enum ::OpenColorIO_v2_4::GpuShaderCreator::TextureDimensions)dimensions;
    auto __arg6 = (enum ::OpenColorIO_v2_4::Interpolation)interpolation;
    float __arg7 = values;
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->addTexture(__arg0, __arg1, width, height, __arg4, __arg5, __arg6, &__arg7);
    values = __arg7;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::Add3DTexture(::System::String^ textureName, ::System::String^ samplerName, unsigned int edgelen, OpenColorIO::OpenColorIO_v2_4::Interpolation interpolation, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] float% values)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(textureName);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(samplerName);
    auto __arg1 = ___arg1.c_str();
    auto __arg3 = (enum ::OpenColorIO_v2_4::Interpolation)interpolation;
    float __arg4 = values;
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->add3DTexture(__arg0, __arg1, edgelen, __arg3, &__arg4);
    values = __arg4;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AddToDeclareShaderCode(::System::String^ shaderCode)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaderCode);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->addToDeclareShaderCode(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AddToHelperShaderCode(::System::String^ shaderCode)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaderCode);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->addToHelperShaderCode(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AddToFunctionHeaderShaderCode(::System::String^ shaderCode)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaderCode);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->addToFunctionHeaderShaderCode(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AddToFunctionShaderCode(::System::String^ shaderCode)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaderCode);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->addToFunctionShaderCode(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AddToFunctionFooterShaderCode(::System::String^ shaderCode)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaderCode);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->addToFunctionFooterShaderCode(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::CreateShaderText(::System::String^ shaderDeclarations, ::System::String^ shaderHelperMethods, ::System::String^ shaderFunctionHeader, ::System::String^ shaderFunctionBody, ::System::String^ shaderFunctionFooter)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(shaderDeclarations);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(shaderHelperMethods);
    auto __arg1 = ___arg1.c_str();
    auto ___arg2 = clix::marshalString<clix::E_UTF8>(shaderFunctionHeader);
    auto __arg2 = ___arg2.c_str();
    auto ___arg3 = clix::marshalString<clix::E_UTF8>(shaderFunctionBody);
    auto __arg3 = ___arg3.c_str();
    auto ___arg4 = clix::marshalString<clix::E_UTF8>(shaderFunctionFooter);
    auto __arg4 = ___arg4.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->createShaderText(__arg0, __arg1, __arg2, __arg3, __arg4);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::Finalize()
{
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->finalize();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::GpuShaderCreator*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::UniqueID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getUniqueID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::UniqueID::set(::System::String^ uid)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(uid);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setUniqueID(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::GpuLanguage OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::Language::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getLanguage();
    return (OpenColorIO::OpenColorIO_v2_4::GpuLanguage)___ret;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::Language::set(OpenColorIO::OpenColorIO_v2_4::GpuLanguage lang)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::GpuLanguage)lang;
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setLanguage(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::FunctionName::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getFunctionName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::FunctionName::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setFunctionName(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::PixelName::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getPixelName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::PixelName::set(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setPixelName(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::ResourcePrefix::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getResourcePrefix();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::ResourcePrefix::set(::System::String^ prefix)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(prefix);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setResourcePrefix(__arg0);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::CacheID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getCacheID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

unsigned int OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureMaxWidth::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getTextureMaxWidth();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureMaxWidth::set(unsigned int maxWidth)
{
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setTextureMaxWidth(maxWidth);
}

bool OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AllowTexture1D::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getAllowTexture1D();
    return ___ret;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::AllowTexture1D::set(bool allowed)
{
    ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->setAllowTexture1D(allowed);
}

unsigned int OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::NextResourceIndex::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getNextResourceIndex();
    return ___ret;
}

unsigned int OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::NumDynamicProperties::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderCreator*)NativePtr)->getNumDynamicProperties();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::VectorFloat(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::VectorFloat(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::~VectorFloat()
{
    delete NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::VectorFloat(OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat*)_0->NativePtr;
    NativePtr = new struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::VectorFloat()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat*)object.ToPointer();
}
OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::VectorInt(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::VectorInt(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::~VectorInt()
{
    delete NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::VectorInt(OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt*)_0->NativePtr;
    NativePtr = new struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::VectorInt()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt*)object.ToPointer();
}
OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::UniformData(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::UniformData(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::~UniformData()
{
    delete NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::UniformData(OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*)_0->NativePtr;
    NativePtr = new struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::UniformData()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData();
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*)object.ToPointer();
}

OpenColorIO::OpenColorIO_v2_4::UniformDataType OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::MType::get()
{
    return (OpenColorIO::OpenColorIO_v2_4::UniformDataType)NativePtr->m_type;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::MType::set(OpenColorIO::OpenColorIO_v2_4::UniformDataType value)
{
    ((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*)NativePtr)->m_type = (enum ::OpenColorIO_v2_4::UniformDataType)value;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::MVectorFloat::get()
{
    return (&NativePtr->m_vectorFloat == nullptr) ? nullptr : gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat*)&NativePtr->m_vectorFloat);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::MVectorFloat::set(OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*)NativePtr)->m_vectorFloat = *(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorFloat*)value->NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::MVectorInt::get()
{
    return (&NativePtr->m_vectorInt == nullptr) ? nullptr : gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt*)&NativePtr->m_vectorInt);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::MVectorInt::set(OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*)NativePtr)->m_vectorInt = *(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData::VectorInt*)value->NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::GpuShaderDesc(class ::OpenColorIO_v2_4::GpuShaderDesc* native)
    : OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator((::OpenColorIO_v2_4::GpuShaderCreator*)native)
{
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc((class ::OpenColorIO_v2_4::GpuShaderDesc*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::GpuShaderDesc(class ::OpenColorIO_v2_4::GpuShaderDesc* native, bool ownNativeInstance)
    : OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator((::OpenColorIO_v2_4::GpuShaderCreator*)native, ownNativeInstance)
{
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc((class ::OpenColorIO_v2_4::GpuShaderDesc*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::~GpuShaderDesc()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::OpenColorIO_v2_4::GpuShaderDesc*) __nativePtr;
    }
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::GetUniform(unsigned int index, OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::UniformData^ data)
{
    if (ReferenceEquals(data, nullptr))
        throw gcnew ::System::ArgumentNullException("data", "Cannot be null because it is a C++ reference (&).");
    auto &__arg1 = *(struct ::OpenColorIO_v2_4::GpuShaderDesc::UniformData*)data->NativePtr;
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getUniform(index, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::GetTexture(unsigned int index, ::System::String^ textureName, ::System::String^ samplerName, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] unsigned int% width, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] unsigned int% height, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureType% channel, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureDimensions% dimensions, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] OpenColorIO::OpenColorIO_v2_4::Interpolation% interpolation)
{
    auto __arg1 = (void*)textureName;
    auto __arg2 = (void*)samplerName;
    unsigned int __arg3 = width;
    unsigned int __arg4 = height;
    ::OpenColorIO_v2_4::GpuShaderCreator::TextureType __arg5 = (enum ::OpenColorIO_v2_4::GpuShaderCreator::TextureType)channel;
    ::OpenColorIO_v2_4::GpuShaderCreator::TextureDimensions __arg6 = (enum ::OpenColorIO_v2_4::GpuShaderCreator::TextureDimensions)dimensions;
    ::OpenColorIO_v2_4::Interpolation __arg7 = (enum ::OpenColorIO_v2_4::Interpolation)interpolation;
    ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getTexture(index, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
    width = __arg3;
    height = __arg4;
    channel = (OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureType)__arg5;
    dimensions = (OpenColorIO::OpenColorIO_v2_4::GpuShaderCreator::TextureDimensions)__arg6;
    interpolation = (OpenColorIO::OpenColorIO_v2_4::Interpolation)__arg7;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::GetTextureValues(unsigned int index, float* values)
{
    auto __arg1 = (const float*&)values;
    ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getTextureValues(index, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::Get3DTexture(unsigned int index, ::System::String^ textureName, ::System::String^ samplerName, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] unsigned int% edgelen, [::System::Runtime::InteropServices::In, ::System::Runtime::InteropServices::Out] OpenColorIO::OpenColorIO_v2_4::Interpolation% interpolation)
{
    auto __arg1 = (void*)textureName;
    auto __arg2 = (void*)samplerName;
    unsigned int __arg3 = edgelen;
    ::OpenColorIO_v2_4::Interpolation __arg4 = (enum ::OpenColorIO_v2_4::Interpolation)interpolation;
    ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->get3DTexture(index, __arg1, __arg2, __arg3, __arg4);
    edgelen = __arg3;
    interpolation = (OpenColorIO::OpenColorIO_v2_4::Interpolation)__arg4;
}

void OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::Get3DTextureValues(unsigned int index, float* values)
{
    auto __arg1 = (const float*&)values;
    ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->get3DTextureValues(index, __arg1);
}

unsigned int OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::NumUniforms::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getNumUniforms();
    return ___ret;
}

unsigned int OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::NumTextures::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getNumTextures();
    return ___ret;
}

unsigned int OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::Num3DTextures::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getNum3DTextures();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::GpuShaderDesc::ShaderText::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::GpuShaderDesc*)NativePtr)->getShaderText();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::Context::Context(class ::OpenColorIO_v2_4::Context* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Context^ OpenColorIO::OpenColorIO_v2_4::Context::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Context((class ::OpenColorIO_v2_4::Context*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::Context::Context(class ::OpenColorIO_v2_4::Context* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::Context^ OpenColorIO::OpenColorIO_v2_4::Context::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::Context((class ::OpenColorIO_v2_4::Context*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::Context::~Context()
{
    delete NativePtr;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::GetSearchPath(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getSearchPath(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Context::ClearSearchPaths()
{
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->clearSearchPaths();
}

void OpenColorIO::OpenColorIO_v2_4::Context::AddSearchPath(::System::String^ path)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(path);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->addSearchPath(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::Context::SetStringVar(::System::String^ name, ::System::String^ value)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(value);
    auto __arg1 = ___arg1.c_str();
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->setStringVar(__arg0, __arg1);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::GetStringVar(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getStringVar(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::GetStringVarNameByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getStringVarNameByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::GetStringVarByIndex(int index)
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getStringVarByIndex(index);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Context::ClearStringVars()
{
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->clearStringVars();
}

void OpenColorIO::OpenColorIO_v2_4::Context::LoadEnvironment()
{
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->loadEnvironment();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::ResolveStringVar(::System::String^ string)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(string);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->resolveStringVar(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::ResolveFileLocation(::System::String^ filename)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filename);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->resolveFileLocation(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::Context::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::Context::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::Context*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::CacheID::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getCacheID();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::SearchPath::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getSearchPath();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Context::SearchPath::set(::System::String^ path)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(path);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->setSearchPath(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Context::NumSearchPaths::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getNumSearchPaths();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::Context::WorkingDir::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getWorkingDir();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void OpenColorIO::OpenColorIO_v2_4::Context::WorkingDir::set(::System::String^ dirname)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(dirname);
    auto __arg0 = ___arg0.c_str();
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->setWorkingDir(__arg0);
}

int OpenColorIO::OpenColorIO_v2_4::Context::NumStringVars::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getNumStringVars();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::EnvironmentMode OpenColorIO::OpenColorIO_v2_4::Context::EnvironmentMode::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::Context*)NativePtr)->getEnvironmentMode();
    return (OpenColorIO::OpenColorIO_v2_4::EnvironmentMode)___ret;
}

void OpenColorIO::OpenColorIO_v2_4::Context::EnvironmentMode::set(OpenColorIO::OpenColorIO_v2_4::EnvironmentMode mode)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::EnvironmentMode)mode;
    ((class ::OpenColorIO_v2_4::Context*)NativePtr)->setEnvironmentMode(__arg0);
}

OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::BuiltinTransformRegistry(class ::OpenColorIO_v2_4::BuiltinTransformRegistry* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry^ OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry((class ::OpenColorIO_v2_4::BuiltinTransformRegistry*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::BuiltinTransformRegistry(class ::OpenColorIO_v2_4::BuiltinTransformRegistry* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry^ OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry((class ::OpenColorIO_v2_4::BuiltinTransformRegistry*) native.ToPointer(), __ownsNativeInstance);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::GetBuiltinStyle(unsigned long long index)
{
    auto __arg0 = index;
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinTransformRegistry*)NativePtr)->getBuiltinStyle(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::GetBuiltinDescription(unsigned long long index)
{
    auto __arg0 = index;
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinTransformRegistry*)NativePtr)->getBuiltinDescription(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::BuiltinTransformRegistry*)object.ToPointer();
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::BuiltinTransformRegistry::NumBuiltins::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinTransformRegistry*)NativePtr)->getNumBuiltins();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::BuiltinConfigRegistry(class ::OpenColorIO_v2_4::BuiltinConfigRegistry* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::BuiltinConfigRegistry(class ::OpenColorIO_v2_4::BuiltinConfigRegistry* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::Get()
{
    auto &___ret = ::OpenColorIO_v2_4::BuiltinConfigRegistry::Get();
    return (OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry^)((&___ret == nullptr) ? nullptr : gcnew ::OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)&___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::GetBuiltinConfigName(unsigned long long configIndex)
{
    auto __arg0 = configIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->getBuiltinConfigName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::GetBuiltinConfigUIName(unsigned long long configIndex)
{
    auto __arg0 = configIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->getBuiltinConfigUIName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::GetBuiltinConfig(unsigned long long configIndex)
{
    auto __arg0 = configIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->getBuiltinConfig(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::GetBuiltinConfigByName(::System::String^ configName)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(configName);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->getBuiltinConfigByName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

bool OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::IsBuiltinConfigRecommended(unsigned long long configIndex)
{
    auto __arg0 = configIndex;
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->isBuiltinConfigRecommended(__arg0);
    return ___ret;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)object.ToPointer();
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::NumBuiltinConfigs::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->getNumBuiltinConfigs();
    return ___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::BuiltinConfigRegistry::DefaultBuiltinConfigName::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::BuiltinConfigRegistry*)NativePtr)->getDefaultBuiltinConfigName();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

OpenColorIO::OpenColorIO_v2_4::SystemMonitors::SystemMonitors(class ::OpenColorIO_v2_4::SystemMonitors* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::SystemMonitors^ OpenColorIO::OpenColorIO_v2_4::SystemMonitors::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::SystemMonitors((class ::OpenColorIO_v2_4::SystemMonitors*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::SystemMonitors::SystemMonitors(class ::OpenColorIO_v2_4::SystemMonitors* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::SystemMonitors^ OpenColorIO::OpenColorIO_v2_4::SystemMonitors::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::SystemMonitors((class ::OpenColorIO_v2_4::SystemMonitors*) native.ToPointer(), __ownsNativeInstance);
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::SystemMonitors::GetMonitorName(unsigned long long idx)
{
    auto __arg0 = idx;
    auto ___ret = ((class ::OpenColorIO_v2_4::SystemMonitors*)NativePtr)->getMonitorName(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::SystemMonitors::GetProfileFilepath(unsigned long long idx)
{
    auto __arg0 = idx;
    auto ___ret = ((class ::OpenColorIO_v2_4::SystemMonitors*)NativePtr)->getProfileFilepath(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::SystemMonitors::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::SystemMonitors::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::SystemMonitors*)object.ToPointer();
}

bool OpenColorIO::OpenColorIO_v2_4::SystemMonitors::IsSupported::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::SystemMonitors*)NativePtr)->isSupported();
    return ___ret;
}

unsigned long long OpenColorIO::OpenColorIO_v2_4::SystemMonitors::NumMonitors::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::SystemMonitors*)NativePtr)->getNumMonitors();
    return ___ret;
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::ConfigIOProxy(class ::OpenColorIO_v2_4::ConfigIOProxy* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy^ OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy((class ::OpenColorIO_v2_4::ConfigIOProxy*) native.ToPointer());
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::ConfigIOProxy(class ::OpenColorIO_v2_4::ConfigIOProxy* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy^ OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy((class ::OpenColorIO_v2_4::ConfigIOProxy*) native.ToPointer(), __ownsNativeInstance);
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::~ConfigIOProxy()
{
    delete NativePtr;
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::ConfigIOProxy()
{
    __ownsNativeInstance = true;
}

::System::Collections::Generic::List<unsigned char>^ OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::GetLutData(::System::String^ filepath)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filepath);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ConfigIOProxy*)NativePtr)->getLutData(__arg0);
    auto _tmp___ret = gcnew ::System::Collections::Generic::List<unsigned char>();
    auto __list0 = ___ret;
    for(auto _element : __list0)
    {
        auto _marshalElement = _element;
        _tmp___ret->Add(_marshalElement);
    }
    return _tmp___ret;
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::GetFastLutFileHash(::System::String^ filepath)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filepath);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ((class ::OpenColorIO_v2_4::ConfigIOProxy*)NativePtr)->getFastLutFileHash(__arg0);
    return clix::marshalString<clix::E_UTF8>(___ret);
}

OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::ConfigIOProxy(OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy^ _0)
{
    __ownsNativeInstance = true;
}

::System::IntPtr OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::OpenColorIO_v2_4::ConfigIOProxy*)object.ToPointer();
}

::System::String^ OpenColorIO::OpenColorIO_v2_4::ConfigIOProxy::ConfigData::get()
{
    auto ___ret = ((class ::OpenColorIO_v2_4::ConfigIOProxy*)NativePtr)->getConfigData();
    return clix::marshalString<clix::E_UTF8>(___ret);
}

/// <summary>
/// <para>During normal usage, OpenColorIO tends to cache certain global information (such</para>
/// <para>as the contents of LUTs on disk, intermediate results, etc.). Calling this function will flush</para>
/// <para>all such information. The global information are related to LUT file identifications, loaded LUT</para>
/// <para>file content and CDL transforms from loaded CDL files.</para>
/// </summary>
/// <remarks>
/// <para>Under normal usage, this is not necessary, but it can be helpful in particular instances,</para>
/// <para>such as designing OCIO profiles, and wanting to re-read luts without restarting.</para>
/// <para>This method does not apply to instance-specific caches such as the Processor cache in</para>
/// <para>a Config instance or the GPU and CPU Processor caches in a Processor instance. So in cases</para>
/// <para>where you still have a Config instance after calling ClearAllCaches, you should also call</para>
/// <para>the Config's clearProcessorCache method.</para>
/// </remarks>
void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::ClearAllCaches()
{
    ::OpenColorIO_v2_4::ClearAllCaches();
}

/// <summary>
/// <para>Get the version number for the library, as a dot-delimited string</para>
/// <para>(e.g., &quot;1.0.0&quot;).</para>
/// </summary>
/// <remarks>This is also available at compile time as OCIO_VERSION_FULL_STR.</remarks>
::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorIO::GetVersion()
{
    auto ___ret = ::OpenColorIO_v2_4::GetVersion();
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

/// <summary>
/// <para>Get the version number for the library, as a</para>
/// <para>single 4-byte hex number (e.g., 0x01050200 for &quot;1.5.2&quot;), to be used</para>
/// <para>for numeric comparisons.</para>
/// </summary>
/// <remarks>This is also at compile time as OCIO_VERSION_HEX.</remarks>
int OpenColorIO::OpenColorIO_v2_4::OpenColorIO::GetVersionHex()
{
    auto ___ret = ::OpenColorIO_v2_4::GetVersionHex();
    return ___ret;
}

/// <summary>Get the global logging level.</summary>
/// <remarks>
/// <para>You can override this at runtime using theenvironment variable. The client application that sets this should use</para>
/// <para>and not the environment variable. The default value is INFO.</para>
/// </remarks>
OpenColorIO::OpenColorIO_v2_4::LoggingLevel OpenColorIO::OpenColorIO_v2_4::OpenColorIO::GetLoggingLevel()
{
    auto ___ret = ::OpenColorIO_v2_4::GetLoggingLevel();
    return (OpenColorIO::OpenColorIO_v2_4::LoggingLevel)___ret;
}

/// <summary>Set the global logging level.</summary>
void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::SetLoggingLevel(OpenColorIO::OpenColorIO_v2_4::LoggingLevel level)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::LoggingLevel)level;
    ::OpenColorIO_v2_4::SetLoggingLevel(__arg0);
}

void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::ResetToDefaultLoggingFunction()
{
    ::OpenColorIO_v2_4::ResetToDefaultLoggingFunction();
}

/// <summary>Log a message using the library logging function.</summary>
void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::LogMessage(OpenColorIO::OpenColorIO_v2_4::LoggingLevel level, ::System::String^ message)
{
    auto __arg0 = (enum ::OpenColorIO_v2_4::LoggingLevel)level;
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(message);
    auto __arg1 = ___arg1.c_str();
    ::OpenColorIO_v2_4::LogMessage(__arg0, __arg1);
}

void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::ResetComputeHashFunction()
{
    ::OpenColorIO_v2_4::ResetComputeHashFunction();
}

/// <summary>
/// <para>Another call modifies the string obtained from a previous call as the method always uses the</para>
/// <para>same memory buffer.</para>
/// </summary>
::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorIO::GetEnvVariable(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::GetEnvVariable(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

/// <remarks>This method is not thread safe.</remarks>
void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::SetEnvVariable(::System::String^ name, ::System::String^ value)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(value);
    auto __arg1 = ___arg1.c_str();
    ::OpenColorIO_v2_4::SetEnvVariable(__arg0, __arg1);
}

/// <remarks>This method is not thread safe.</remarks>
void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::UnsetEnvVariable(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    ::OpenColorIO_v2_4::UnsetEnvVariable(__arg0);
}

/// <summary>cpp:function::</summary>
bool OpenColorIO::OpenColorIO_v2_4::OpenColorIO::IsEnvVariablePresent(::System::String^ name)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(name);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::IsEnvVariablePresent(__arg0);
    return ___ret;
}

/// <summary>
/// <para>Make a config path forward-compatible by replacing special built-in config names</para>
/// <para>with the current name.</para>
/// </summary>
/// <returns>Resolved path if possible. Otherwise, the original path is returned unmodified.</returns>
/// <remarks>
/// <para>Application developers should call this function on any config path they intend to persist</para>
/// <para>(e.g., to include in a file saved from a DCC).</para>
/// <para>As the built-in config collection evolves, special names such as &quot;ocio://default&quot; and</para>
/// <para>&quot;ocio://studio-config-latest&quot; will point to newer versions of those configs. Therefore, it is</para>
/// <para>recommended that application developers not save those strings and instead save the string that</para>
/// <para>refers to the current version of that config. That way, it's guaranteed that there will be no</para>
/// <para>change of behavior in the future. For example, as of OCIO 2.4, &quot;ocio://default&quot; should be saved</para>
/// <para>as &quot;ocio://cg-config-v2.2.0_aces-v1.3_ocio-v2.4&quot;.</para>
/// <para>Note that there is no validation done on the path. That is left to the application since</para>
/// <para>typically the application will load the config before attempting to save its path</para>
/// <para>and therefore catch, for example, a badly formed URI such as &quot;ocio:default&quot;.</para>
/// </remarks>
::System::String^ OpenColorIO::OpenColorIO_v2_4::OpenColorIO::ResolveConfigPath(::System::String^ originalPath)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(originalPath);
    auto __arg0 = ___arg0.c_str();
    auto ___ret = ::OpenColorIO_v2_4::ResolveConfigPath(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

/// <summary>Extract an OCIO Config archive.</summary>
/// <param name="archivePath">Absolute path to the .ocioz file.</param>
/// <param name="destinationDir">
/// <para>Absolute path of the directory you want to be created to contain the</para>
/// <para>contents of the unarchived config.</para>
/// </param>
/// <remarks>
/// <para>Converts an archived config file (.ocioz file) back to its original form as a config file</para>
/// <para>and associated LUT files.  This creates destinationDir and then creates a config.ocio file</para>
/// <para>at the root of that working directory and then unpacks the LUT files into their relative</para>
/// <para>locations relative to that working directory, creating any necessary sub-directories in the</para>
/// <para>process.  Note that configs which contain LUT files outside the working directory are not</para>
/// <para>archivable, and so this function will not create directories outside the working directory.</para>
/// <para>Exception If the archive is not found or there is a problem extracting it.</para>
/// </remarks>
void OpenColorIO::OpenColorIO_v2_4::OpenColorIO::ExtractOCIOZArchive(::System::String^ archivePath, ::System::String^ destinationDir)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(archivePath);
    auto __arg0 = ___arg0.c_str();
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(destinationDir);
    auto __arg1 = ___arg1.c_str();
    ::OpenColorIO_v2_4::ExtractOCIOZArchive(__arg0, __arg1);
}

